" C++ Development Configuration
"""""""""""""""""""""""""""""""
if !exists('g:cpp_development_configuration_folder')
  let g:cpp_development_configuration_folder = getcwd()

  " Ale configuration.
  """"""""""""""""""""
  let g:ale_linters = {'cpp': ['clangformat', 'clangtidy', 'gcc']}
  let g:ale_fix_on_save = 1
  let g:ale_fixers = { '*': ['remove_trailing_lines', 'trim_whitespace'], }

  let g:ale_c_build_dir = getcwd()
  let g:ale_c_parse_makefile = 1
  let g:ale_c_parse_compile_commands = 1

  let g:ale_cpp_clangtidy_checks = ['readability-*', 'performance-*', 'modernize-*', 'bugprone-*', 'boost-*']

  noremap ]a :ALENextWrap<CR>
  noremap [a :ALEPreviousWrap<CR>

  " Neoinclude
  """"""""""""
  " set path=".,/usr/local/include,/usr/include"

  " Makeprg
  """""""""
  let &makeprg="make --directory=./build -s -j`nproc`"
  let &makeef=getcwd() . "/build/build_errors.txt"

  " Custom Mappings
  """""""""""""""""
  map <F1> :!mkdir build<CR>
  map <F2> :CMakeClean<CR>
  map <F3> :make -j8<CR>
  map <F4> :let g:cmake_build_type="debug" <bar> CMake<CR>
  map <F5> :let g:cmake_build_type="release" <bar> CMake<CR>
  map <F6> :make -j8 <bar> :make CTEST_OUTPUT_ON_FAILURE=1 test<CR>
endif
